;;; bindings.emacs.el --- Key Bindings for Emacs
;;
;; Copyright (c) 2013 David Conner
;;
;; Author: David Conner <dconner.pro@gmail.com>
;; URL:
;; Version: 0.0.1
;; Keywords: me

;;; Commentary:

;; Mappin' some keys, boss.

;;; License:

;; Go on and map some keys, bubb.

;;; Code:

;; Codin' it on up now, boss.

;;==============================;;
;; Ergoemacs
;;==============================;;
(setenv "ERGOEMACS_KEYBOARD_LAYOUT" "us")
(ergoemacs-mode)
;(ergoemacs-mode 1) ;emacs minor mode

;;==============================;;
;; Text Nav
;;==============================;;
(global-set-key (kbd "<\M-[ H>") 'beginning-of-line)
(global-set-key "\M-[ F" 'end-of-line)

;;==============================;;
;; Text
;;==============================;;
(global-set-key (kbd "\C-x w") 'wrap-no-lines)

;; Remap the Esc. Sequences for Home & End
(unless window-system
  (define-key input-decode-map "[H" [home])
  (define-key input-decode-map "[F" [end]))

(global-set-key (kbd "<home>") 'move-beginning-of-line)
(global-set-key (kbd "<end>") 'move-end-of-line)

;;==============================;;
;; Hyper Key
;;==============================;;
;; http://stackoverflow.com/questions/10730775/emacs-create-key-modifier

;; when FN => PC_APPLICATION_KEY
(global-unset-key "\C-p") ;; print .. from emacs .. really?
(define-key function-key-map (kbd "\C-p") 'event-apply-hyper-modifier)

;; alternate configuration with PC_APPLICATION_KEY (p) => f20
;;(define-key input-decode-map "p" [f20])
;;(define-key function-key-map (kbd "<f20>") 'event-apply-hyper-modifier)

;;==============================;;
;; Super Key
;;==============================;;
;; modifier keys can be configured using these:
;; (setq mac-option-modifier 'meta)
;; (setq mac-control-modifier 'ctrl)
;; (setq mac-command-modifier 'hyper)
;; (setq mac-command-modifier 'super)
;; (setq mac-command-key-is-meta  t)
;; (setq mac-option-key-is-meta nil)
;; (setq mac-command-key-is-meta t)
;; (setq mac-option-modifier nil)

;; (setq mac-command-modifier 'super) ; doesn't seem work properly in iTerm

;; supposed to prevent osx from trapping command hotkeys
;;   but doesn't work, at least from within iTerm
;; (setq mac-pass-command-to-system nil) ;enable/disable?
;; (setq mac-pass-command-to-system t) ;enable/disable?
;; (setq mac-pass-command-to-system) ;enable/disable?
;; (setq mac-pass-control-to-system nil)

;;==============================;;
;; Buffers/Frames/Windows
;;==============================;;
(global-set-key "\M-`" 'next-multiframe-window)

;; TODO: set iBuffer mappings
;; Ergo Emacs iBuffer mappings
;; (global-set-key (kbd "<C-o>") 'find-file) ; Open file or dir
;; (global-set-key (kbd "<C-w>") 'kill-this-buffer) ; Close file

;; (global-set-key (kbd "<C-prior>") 'previous-user-buffer) ; Ctrl+PageUp
;; (global-set-key (kbd "<C-next>") 'next-user-buffer) ; Ctrl+PageDown
;; (global-set-key (kbd "<C-S-prior>") 'previous-emacs-buffer) ; Ctrl+Shift+PageUp
;; (global-set-key (kbd "<C-S-next>") 'next-emacs-buffer) ; Ctrl+Shift+PageDown

;;==============================;;
;; Twittering-mode
;;==============================;;
(global-set-key (kbd "H-C-t") 'twit)

;;==============================;;
;; Rails - Rinari/MaMuMo
;;==============================;;
(global-set-key (kbd "H-C-r") 'rinari-launch)

;; When Rinari mode is loaded, add extra bindings to its key map enabling the
;; use of M-R and M-r as its prefixes. The easier to type M-r is used for the
;; frequently used `find' functions and M-R is used for the more infrequently
;; used rake/script/web-server commands. M-r is normally bound to
;; `move-to-window-line-top-bottom', which I can do without, and M-R is
;; normally unbound. Examples of the changes below; it should be obvious how to
;; pick your own prefixes if you don't like mine.
;;
;; Function                  Default Binding    New Binding
;; ========                  ===============    ===========
;; rinari-find-controller    C-c ; f c          H-r c
;; rinari-web-server         C-c ; w            H-R w
(add-hook 'rinari-minor-mode-hook (lambda ()
  (define-prefix-command 'pd-rinari-map1)
  (define-prefix-command 'pd-rinari-map2)
  (local-set-key (kbd "H-R") 'pd-rinari-map1)
  (local-set-key (kbd "H-r") 'pd-rinari-map2)

  (define-key pd-rinari-map1 "'" 'rinari-find-by-context)
  (define-key pd-rinari-map1 ";" 'rinari-find-by-context)
  (define-key pd-rinari-map1 "c" 'rinari-console)
  (define-key pd-rinari-map1 "d" 'rinari-cap)
  (define-key pd-rinari-map1 "e" 'rinari-insert-erb-skeleton)
  (define-key pd-rinari-map1 "g" 'rinari-rgrep)
  (define-key pd-rinari-map1 "p" 'rinari-goto-partial)
  (define-key pd-rinari-map1 "q" 'rinari-sql)
  (define-key pd-rinari-map1 "r" 'rinari-rake)
  (define-key pd-rinari-map1 "s" 'rinari-script)
  (define-key pd-rinari-map1 "t" 'rinari-test)
  (define-key pd-rinari-map1 "w" 'rinari-web-server)
  (define-key pd-rinari-map1 "x" 'rinari-extract-partial)

  (define-key pd-rinari-map2 ";" 'rinari-find-by-context)
  (define-key pd-rinari-map2 "C" 'rinari-find-cells)
  (define-key pd-rinari-map2 "F" 'rinari-find-features)
  (define-key pd-rinari-map2 "M" 'rinari-find-mailer)
  (define-key pd-rinari-map2 "S" 'rinari-find-steps)
  (define-key pd-rinari-map2 "Y" 'rinari-find-sass)
  (define-key pd-rinari-map2 "a" 'rinari-find-application)
  (define-key pd-rinari-map2 "c" 'rinari-find-controller)
  (define-key pd-rinari-map2 "e" 'rinari-find-environment)
  (define-key pd-rinari-map2 "f" 'rinari-find-file-in-project)
  (define-key pd-rinari-map2 "h" 'rinari-find-helper)
  (define-key pd-rinari-map2 "i" 'rinari-find-migration)
  (define-key pd-rinari-map2 "j" 'rinari-find-javascript)
  (define-key pd-rinari-map2 "l" 'rinari-find-lib)
  (define-key pd-rinari-map2 "m" 'rinari-find-model)
  (define-key pd-rinari-map2 "n" 'rinari-find-configuration)
  (define-key pd-rinari-map2 "o" 'rinari-find-log)
  (define-key pd-rinari-map2 "p" 'rinari-find-public)
  (define-key pd-rinari-map2 "r" 'rinari-find-rspec)
  (define-key pd-rinari-map2 "s" 'rinari-find-script)
  (define-key pd-rinari-map2 "t" 'rinari-find-test)
  (define-key pd-rinari-map2 "u" 'rinari-find-plugin)
  (define-key pd-rinari-map2 "v" 'rinari-find-view)
  (define-key pd-rinari-map2 "w" 'rinari-find-worker)
  (define-key pd-rinari-map2 "x" 'rinari-find-fixture)
  (define-key pd-rinari-map2 "y" 'rinari-find-stylesheet)
  (define-key pd-rinari-map2 "z" 'rinari-find-rspec-fixture)))

;;==============================;;
;; My Key Bindings
;;==============================;;

;; TODO: set gist hotkey
; (global-set-key (kbd "<f8>") 'gist-region-or-buffer)

;;==============================;;
;; My Key Bindings
;;==============================;;
;; http://es.gnu.org/~aleksander/emacs/dotemacs.el

; ;; Simplify Go-to-line with Meta-g
; (global-set-key "\M-g" 'goto-line)

; ;; C-c i calls insert-date-string
; (global-set-key (kbd "C-c i") 'insert-date-string)

; ;; Electric buffer list
; (global-set-key "\C-b" 'electric-buffer-list)
; (global-set-key "\C-x\C-b" 'electric-buffer-list)

; ;; Reload .emacs
; (global-set-key "\M-r"
;   '(lambda ()
;      (interactive)
;      (load-file "~/.emacs")))

; ;; disable that minimize window thing
; (global-unset-key "\C-x\C-z")

; ;; disable closing emacs in Mac OS X
; (if (system-type-is-darwin)
;     (global-unset-key "\C-z"))

; ;; Uncomment region command. Comment region is already "C-c c"
; (global-set-key (kbd "\C-c z") 'uncomment-region)

; ;; Enable Dired Extra
; (add-hook 'dired-load-hook
;           (lambda ()
;             (load "dired-x")))
