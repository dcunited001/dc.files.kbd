;;; package --- Summary

;;; Commentary:

;; Mappin' some keys, boss.

;;; License:

;; Go on and map some keys, bubb.

;;; Code:

;; Codin' it on up now, boss.

;;; bindings.emacs.el --- Key Bindings for Emacs
;;
;; Copyright (c) 2013 David Conner
;;
;; Author: David Conner <dconner.pro@gmail.com>
;; URL:
;; Version: 0.0.1
;; Keywords: me

;; TODO: load some keys from json?
;; TODO: merge bindkeys-json["all"] and bindkeys-json[emos]
;; TODO: eval json as code!

;; emacs-tw/awesome-emacs: https://github.com/emacs-tw/awesome-emacs

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;___HYPERKEY
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ;; http://stackoverflow.com/questions/10730775/emacs-create-key-modifier

;; (defun osx-terminal-map-hyper ()
;;   "Map hyper key in OSX terminal.  This requires KeyRemap Config.
;;   must map FN => Danish Dollar" ;; this works in non-text buffers, but not in typing text-buffers
;;   (define-key function-key-map (kbd "<ยง>") 'event-apply-hyper-modifier))

;; alternate configuration with PC_APPLICATION_KEY (p) => f20
;;(define-key input-decode-map "p" [f20])
;;(define-key function-key-map (kbd "<f20>") 'event-apply-hyper-modifier)

(defun osx-map-hyper ()
  "Map hyper key in OSX.  This should work without KeyRemap configuration.
  This only works in GUI emacs."
  ;;(ns-function-modifier 'hyper)
  (setq ns-function-modifier 'hyper))

(cond
 ;;((equal system-type 'darwin) (osx-map-hyper))
 ((equal system-type 'darwin) (osx-map-hyper)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;___EDITOR
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(global-set-key (kbd "s-/") 'winner-undo)
(global-set-key (kbd "H-/") 'undo-tree-visualize)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;___HELM
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key (kbd "M-y") 'helm-show-kill-ring)
(global-set-key (kbd "C-x b") 'helm-mini)
(global-set-key (kbd "C-x C-f") 'helm-find-files)
(global-set-key (kbd "C-c h k") 'describe-bindings)
(global-set-key (kbd "C-c h u") 'helm-unicode)

;; helm-taskwsitch requires X-Windows
(cond ((equal system-type 'linux)
       (global-set-key (kbd "A-<tab>") 'helm-taskswitch)))

;; helm-commandlinefu.el: https://github.com/xuchunyang/helm-commandlinefu
;; TODO: fix commandlinefu
(global-set-key (kbd "H-c") 'helm-commandlinefu-search)
(global-set-key (kbd "H-C") 'helm-commandlinefu-browse)

(global-set-key (kbd "H-e") 'helm-emmet)

(eval-after-load 'flycheck
  '(define-key flycheck-mode-map (kbd "C-c ! h") 'helm-flycheck))

(global-set-key (kbd "H-r") 'helm-rage)

;; TODO: helm-swoop
;; ;; Change the keybinds to whatever you like :)
;; (global-set-key (kbd "M-i") 'helm-swoop)
;; (global-set-key (kbd "M-I") 'helm-swoop-back-to-last-point)
;; (global-set-key (kbd "C-c M-i") 'helm-multi-swoop)
;; (global-set-key (kbd "C-x M-i") 'helm-multi-swoop-all)

;; ;; When doing isearch, hand the word over to helm-swoop
;; (define-key isearch-mode-map (kbd "M-i") 'helm-swoop-from-isearch)
;; ;; From helm-swoop to helm-multi-swoop-all
;; (define-key helm-swoop-map (kbd "M-i") 'helm-multi-swoop-all-from-helm-swoop)
;; ;; When doing evil-search, hand the word over to helm-swoop
;; ;; (define-key evil-motion-state-map (kbd "M-i") 'helm-swoop-from-evil-search)

;; ;; Instead of helm-multi-swoop-all, you can also use helm-multi-swoop-current-mode
;; (define-key helm-swoop-map (kbd "M-m") 'helm-multi-swoop-current-mode-from-helm-swoop)

;; ;; Move up and down like isearch
;; (define-key helm-swoop-map (kbd "C-r") 'helm-previous-line)
;; (define-key helm-swoop-map (kbd "C-s") 'helm-next-line)
;; (define-key helm-multi-swoop-map (kbd "C-r") 'helm-previous-line)
;; (define-key helm-multi-swoop-map (kbd "C-s") 'helm-next-line)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;___AUTOCOMPLETE
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; 'completion-at-tab only works while typing a word
(global-set-key (kbd "H-TAB") 'completion-at-point)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;___AVY
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(global-set-key (kbd "C-c C-j") 'avy-resume)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;___TEXT
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(global-set-key (kbd "M-[") 'backward-sentence)
(global-set-key (kbd "M-]") 'forward-sentence)

;; (global-set-key (kbd "C-x w") 'wrap-no-lines)
;; (global-set-key (kbd "<home>") 'move-beginning-of-line)
;; (global-set-key (kbd "<end>") 'move-end-of-line)

;; (global-set-key (kbd "H-TAB") 'indent-region)
;; (global-set-key (kbd "H-/") 'comment-region)
;; (global-set-key (kbd "H-?") 'uncomment-region)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;___YASNIPPET
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(global-set-key (kbd "C-c y") 'helm-yas-complete)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;___MARKDOWN
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(global-set-key (kbd "H-t") 'mw-thesaurus-lookup-at-point)
(global-set-key (kbd "H-d") 'helm-wordnet-suggest)
(global-set-key (kbd "H-s") 'ispell-word)
(global-set-key (kbd "H-M") 'markdown-preview)
;; TODO: helm-ispell doesn't work when set to this key
;; (global-set-key (kbd "H-s") 'helm-ispell)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;___SEARCH
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; ;; isearch
;; (global-set-key (kbd "H-f") 'isearch-forward)
;; ;;(global-set-key (kbd "C-f") 'isearch-repeat-forward)

;; (Global-Set-KeY (kbd "H-F") 'isearch-backward)
;; ;;(global-set-key (kbd "C-F") 'isearch-repeat-backward)

;; ;; isearch-toggle-case-fold      M-c
;; ;; isearch-toggle-regexp         M-r

;; find-grep

(global-set-key (kbd "H-f") 'find-grep)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;___REPLACE
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (global-set-key (kbd "H-R _") 'isearch-query-replace)
;; (global-set-key (kbd "H-R SPC") 'isearch-query-replace-regexp)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;___CONFIG
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(global-set-key (kbd "H-i") 'reload-init)
(global-set-key (kbd "H-I") 'reload-init-all)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;___FILENAV
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (global-set-key (kbd "H-l") 'goto-line)
;; (global-set-key (kbd "H-o") 'projectile-recentf)
;; (global-set-key (kbd "H-t") 'projectile-toggle-between-implementation-and-test)
;; (global-set-key (kbd "H-T") 'projectile-find-test-file)
;; (global-set-key (kbd "H-p t") 'projectile-test-project)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;___PROJECTILESEARCH
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (global-set-key (kbd "H-g") 'projectile-grep)
;; ;; TODO: move projectile-replace
;; ;;(global-set-key (kbd "H-r") 'projectile-replace)
;; (global-set-key (kbd "H-a") 'projectile-ack)
;; (global-set-key (kbd "H-p o") 'projectile-multi-occur)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;___BUFFERNAV
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (global-set-key (kbd "H-B") 'ibuffer)
;; (global-set-key (kbd "H-k") 'projectile-kill-buffers)
;; ;;(global-set-key (kbd "H-b") 'projectile-switch-to-buffer)

;; (global-set-key (kbd "M-`") 'next-user-buffer)
;; (global-set-key (kbd "M-~") 'previous-user-buffer)
;; ;; next-emacs-buffer
;; ;; previous-emacs-buffer

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;___WINDOWNAV
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; ;; next-multiframe-window switches to the next window
;; ;;   regardless of which frame it's on
;; ;;(global-set-key (kbd "C-`") 'next-multiframe-window)
;; ;;(global-set-key (kbd "C-~") 'previous-multiframe-window)
;; ;; should use windmove instead

;; ;; (windmove-default-keybindings)
(global-set-key (kbd "<s-up>") 'windmove-up)
(global-set-key (kbd "<s-down>") 'windmove-down)
(global-set-key (kbd "<s-left>") 'windmove-left)
(global-set-key (kbd "<s-right>") 'windmove-right)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;___FRAMENAV
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; ;;'ergoemacs-switch-to-next-frame
;; ;;'ergoemacs-switch-to-prev-frame
;; (global-set-key (kbd "H-n") 'new-frame)
;; (global-set-key (kbd "H-N") 'delete-frame)
;; (global-set-key (kbd "H-`") 'ergoemacs-switch-to-next-frame)
;; (global-set-key (kbd "H-~") 'ergoemacs-switch-to-previous-frame)
;; ;; FIXME: why doesn't C-` work with emacs??
;; ;;(global-set-key (kbd "C-`") 'ns-next-frame)
;; ;;(global-set-key (kbd "C-~") 'ns-prev-frame)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;___TAGS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (global-set-key (kbd "H-p R") 'projectile-regenerate-tags)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;___LISPEVAL
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ;; set to emacs-lisp-mode only?

;;(kset 'ielm '(("all"."H-i")))

(global-set-key (kbd "H-x i") 'ielm)
(global-set-key (kbd "H-x H-x") 'eval-region)
(global-set-key (kbd "H-x x") 'eval-last-sexp)
(global-set-key (kbd "H-x e") 'eval-expression)
(global-set-key (kbd "H-x b") 'eval-buffer)

;; (global-set-key (kbd "H-X") 'eval-region)
;; (global-set-key (kbd "H-x p") 'eval-print-last-sexp)
;; (global-set-key (kbd "H-x r") 'eval-region)
;; (global-set-key (kbd "H-x d") 'eval-defun-2) ;; or eval-defun?

;; ;; prelude-eval-and-replace - eval and replace region with result

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;___SHELL
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; (global-set-key (kbd "H-s") 'shell-command)
;; (global-set-key (kbd "H-S") 'ansi-term)
;; ;; sh-beginning-of-command
;; ;; sh-end-of-command

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;___MAGIT
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ;; TODO: find a few more keys here
;; (global-set-key (kbd "H-G") 'magit-status)       ;; MAGIT (why does H-C-g not work?)
;; ;;(global-set-key (kbd "H-C-r") 'rinari-launch)    ;; RINARI

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;___RESTCLIENT
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; these are already mapped (run helm-restclient)
;; C-c C-g: restclient-helm

;; C-c C-c: runs the query under the cursor, tries to pretty-print the response (if possible)
;; C-c C-r: same, but doesn't do anything with the response, just shows the buffer
;; C-c C-v: same as C-c C-c, but doesn't switch focus to other window
;; C-c C-p: jump to the previous query
;; C-c C-n: jump to the next query
;; C-c C-.: mark the query under the cursor
;; C-c C-u: copy query under the cursor as a curl command
;; C-c C-g: start a helm session with sources for variables and requests (if helm is available, of course)
;; C-c n n: narrow to region of current request (including headers)
;; TAB: hide/show current request body, only if
;; C-c C-a: show all collapsed regions

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;___HELP
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ;; TODO: find a different modkey combo?
;; (global-set-key (kbd "H-C-m") 'describe-mode)            ;; DESCRIBE MODE
;; (global-set-key (kbd "H-C-K") 'describe-key)             ;; DESCRIBE KEY
;; (global-set-key (kbd "H-C-k") 'Helper-describe-bindings) ;; DESCRIBE BINDINGS

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;___CLOJURE
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ;; nrepl-jack-in

;; (global-set-key (kbd "H-j") 'nrepl-javadoc)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;___RUBY
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ;; ruby-beginning-of-defun
;; ;; ruby-beginning-of-block
;; ;; ruby-end-of-defun
;; ;; ruby-end-of-block

;; ;; ruby send defuns??

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;___RINARI
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ;; When Rinari mode is loaded, add extra bindings to its key map enabling the
;; ;; use of M-R and M-r as its prefixes. The easier to type M-r is used for the
;; ;; frequently used `find' functions and M-R is used for the more infrequently
;; ;; used rake/script/web-server commands. M-r is normally bound to
;; ;; `move-to-window-line-top-bottom', which I can do without, and M-R is
;; ;; normally unbound. Examples of the changes below; it should be obvious how to
;; ;; pick your own prefixes if you don't like mine.
;; ;;
;; ;; Function                  Default Binding    New Binding
;; ;; ========                  ===============    ===========
;; ;; rinari-find-controller    C-c ; f c          H-r c
;; ;; rinari-web-server         C-c ; w            H-R w
;; (add-hook 'rinari-minor-mode-hook (lambda ()
;;   (define-prefix-command 'pd-rinari-map1)
;;   (define-prefix-command 'pd-rinari-map2)
;;   (local-set-key (kbd "H-R") 'pd-rinari-map1)
;;   (local-set-key (kbd "H-r") 'pd-rinari-map2)

;;   (define-key pd-rinari-map1 "'" 'rinari-find-by-context)
;;   (define-key pd-rinari-map1 ";" 'rinari-find-by-context)
;;   (define-key pd-rinari-map1 "c" 'rinari-console)
;;   (define-key pd-rinari-map1 "d" 'rinari-cap)
;;   (define-key pd-rinari-map1 "e" 'rinari-insert-erb-skeleton)
;;   (define-key pd-rinari-map1 "g" 'rinari-rgrep)
;;   (define-key pd-rinari-map1 "p" 'rinari-goto-partial)
;;   (define-key pd-rinari-map1 "q" 'rinari-sql)
;;   (define-key pd-rinari-map1 "r" 'rinari-rake)
;;   (define-key pd-rinari-map1 "s" 'rinari-script)
;;   (define-key pd-rinari-map1 "t" 'rinari-test)
;;   (define-key pd-rinari-map1 "w" 'rinari-web-server)
;;   (define-key pd-rinari-map1 "x" 'rinari-extract-partial)

;;   (define-key pd-rinari-map2 ";" 'rinari-find-by-context)
;;   (define-key pd-rinari-map2 "C" 'rinari-find-cells)
;;   (define-key pd-rinari-map2 "F" 'rinari-find-features)
;;   (define-key pd-rinari-map2 "M" 'rinari-find-mailer)
;;   (define-key pd-rinari-map2 "S" 'rinari-find-steps)
;;   (define-key pd-rinari-map2 "Y" 'rinari-find-sass)
;;   (define-key pd-rinari-map2 "a" 'rinari-find-application)
;;   (define-key pd-rinari-map2 "c" 'rinari-find-controller)
;;   (define-key pd-rinari-map2 "e" 'rinari-find-environment)
;;   (define-key pd-rinari-map2 "f" 'rinari-find-file-in-project)
;;   (define-key pd-rinari-map2 "h" 'rinari-find-helper)
;;   (define-key pd-rinari-map2 "i" 'rinari-find-migration)
;;   (define-key pd-rinari-map2 "j" 'rinari-find-javascript)
;;   (define-key pd-rinari-map2 "l" 'rinari-find-lib)
;;   (define-key pd-rinari-map2 "m" 'rinari-find-model)
;;   (define-key pd-rinari-map2 "n" 'rinari-find-configuration)
;;   (define-key pd-rinari-map2 "o" 'rinari-find-log)
;;   (define-key pd-rinari-map2 "p" 'rinari-find-public)
;;   (define-key pd-rinari-map2 "r" 'rinari-find-rspec)
;;   (define-key pd-rinari-map2 "s" 'rinari-find-script)
;;   (define-key pd-rinari-map2 "t" 'rinari-find-test)
;;   (define-key pd-rinari-map2 "u" 'rinari-find-plugin)
;;   (define-key pd-rinari-map2 "v" 'rinari-find-view)
;;   (define-key pd-rinari-map2 "w" 'rinari-find-worker)
;;   (define-key pd-rinari-map2 "x" 'rinari-find-fixture)
;;   (define-key pd-rinari-map2 "y" 'rinari-find-stylesheet)
;;   (define-key pd-rinari-map2 "z" 'rinari-find-rspec-fixture)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;___YAML
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ;; no idea why yaml-mode disables set-mark-command (selecting text)
;; ;;   i'm going to assume it's prelude overlapping with ergoemacs
;; ;; - nevermind, this fix doesn't work.  yay, complete waste of time.
;; ;; (add-hook 'yaml-mode-hook '(lambda () (define-key "M-SPC" 'set-mark-command)))

;; ;;==============================;;
;; ;; My Key Bindings
;; ;;==============================;;

;; ;; TODO: set gist hotkey
;;                                         ; (global-set-key (kbd "<f8>") 'gist-region-or-buffer)

;; ;;==============================;;
;; ;; My Key Bindings
;; ;;==============================;;
;; ;; http://es.gnu.org/~aleksander/emacs/dotemacs.el

;;                                         ; ;; Simplify Go-to-line with Meta-g
;;                                         ; (global-set-key "\M-g" 'goto-line)

;;                                         ; ;; C-c i calls insert-date-string
;;                                         ; (global-set-key (kbd "C-c i") 'insert-date-string)

;;                                         ; ;; Electric buffer list
;;                                         ; (global-set-key "\C-b" 'electric-buffer-list)
;;                                         ; (global-set-key "\C-x\C-b" 'electric-buffer-list)

;;                                         ; ;; disable that minimize window thing
;;                                         ; (global-unset-key "\C-x\C-z")

;;                                         ; ;; disable closing emacs in Mac OS X
;;                                         ; (if (system-type-is-darwin)
;;                                         ;     (global-unset-key "\C-z"))

;;                                         ; ;; Uncomment region command. Comment region is already "C-c c"
;;                                         ; (global-set-key (kbd "\C-c z") 'uncomment-region)

;;                                         ; ;; Enable Dired Extra
;;                                         ; (add-hook 'dired-load-hook
;;                                         ;           (lambda ()
;;                                         ;             (load "dired-x")))


(provide 'bindkeys)

;;; bindkeys.el ends here
